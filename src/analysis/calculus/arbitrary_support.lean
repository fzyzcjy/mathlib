/-
Copyright (c) 2022 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import analysis.calculus.specific_functions

/-!
# Arbitrary support

We show that any open set is the support of a smooth function taking values in `[0, 1]`
-/
open set metric topological_space function
open_locale topological_space nnreal

@[to_additive]
lemma continuous.is_open_mul_support {Œ± Œ≤ : Type*} [topological_space Œ±] [topological_space Œ≤]
  [t2_space Œ≤] [has_one Œ≤]
  {f : Œ± ‚Üí Œ≤} (hf : continuous f) : is_open (mul_support f) :=
is_open_ne_fun hf continuous_const

variables {E : Type*} [normed_add_comm_group E] [normed_space ‚Ñù E] [finite_dimensional ‚Ñù E]

theorem exists_smooth_support_subset {s : set E} {x : E} (hs : s ‚àà ùìù x) :
  ‚àÉ (f : E ‚Üí ‚Ñù), f.support ‚äÜ s ‚àß has_compact_support f ‚àß cont_diff ‚Ñù ‚ä§ f ‚àß
    range f ‚äÜ Icc 0 1 ‚àß f x = 1 :=
begin
  obtain ‚ü®d, d_pos, hd‚ü© : ‚àÉ (d : ‚Ñù) (hr : 0 < d), euclidean.ball x d ‚äÜ s,
    from euclidean.nhds_basis_ball.mem_iff.1 hs,
  let c : cont_diff_bump_of_inner (to_euclidean x) :=
  { r := d/2,
    R := d,
    r_pos := half_pos d_pos,
    r_lt_R := half_lt_self d_pos },
  let f : E ‚Üí ‚Ñù := c ‚àò to_euclidean,
  have f_supp : f.support ‚äÜ euclidean.ball x d,
  { assume y hy,
    have : to_euclidean y ‚àà function.support c,
      by simpa only [f, function.mem_support, function.comp_app, ne.def] using hy,
    rwa c.support_eq at this },
  refine ‚ü®f, f_supp.trans hd, _, _, _, _‚ü©,
  { refine is_compact_of_is_closed_bounded is_closed_closure _,
    have : bounded (euclidean.closed_ball x d), from euclidean.is_compact_closed_ball.bounded,
    apply this.mono _,
    refine (is_closed.closure_subset_iff euclidean.is_closed_closed_ball).2 _,
    exact f_supp.trans euclidean.ball_subset_closed_ball },
  { apply c.cont_diff.comp,
    exact continuous_linear_equiv.cont_diff _ },
  { rintros t ‚ü®y, rfl‚ü©,
    exact ‚ü®c.nonneg, c.le_one‚ü© },
  { apply c.one_of_mem_closed_ball,
    apply mem_closed_ball_self,
    exact (half_pos d_pos).le }
end


open function
/- is_open_Union_countable [second_countable_topology Œ±]
  {Œπ} (s : Œπ ‚Üí set Œ±) (H : ‚àÄ i, is_open (s i)) :
  ‚àÉ T : set Œπ, T.countable ‚àß (‚ãÉ i ‚àà T, s i) = ‚ãÉ i, s i :-/

theorem is_open.exists_smooth_support_eq {s : set E} (hs : is_open s) :
  ‚àÉ (f : E ‚Üí ‚Ñù), f.support = s ‚àß cont_diff ‚Ñù ‚ä§ f ‚àß set.range f ‚äÜ set.Icc 0 1 :=
begin
  rcases eq_empty_or_nonempty s with rfl|h's,
  sorry { exact ‚ü®(Œª x, 0), function.support_zero, cont_diff_const,
      by simp only [range_const, singleton_subset_iff, left_mem_Icc, zero_le_one]‚ü© },
  let Œπ := {f : E ‚Üí ‚Ñù // f.support ‚äÜ s ‚àß has_compact_support f ‚àß cont_diff ‚Ñù ‚ä§ f ‚àß
    range f ‚äÜ Icc 0 1},
  obtain ‚ü®T, T_count, hT‚ü© : ‚àÉ T : set Œπ, T.countable ‚àß (‚ãÉ f ‚àà T, support (f : E ‚Üí ‚Ñù)) = s,
  sorry { have : (‚ãÉ (f : Œπ), (f : E ‚Üí ‚Ñù).support) = s,
    { refine subset.antisymm (Union_subset (Œª f, f.2.1)) _,
      assume x hx,
      rcases exists_smooth_support_subset (hs.mem_nhds hx) with ‚ü®f, hf‚ü©,
      let g : Œπ := ‚ü®f, hf.1, hf.2.1, hf.2.2.1, hf.2.2.2.1‚ü©,
      have : x ‚àà support (g : E ‚Üí ‚Ñù),
        by simp only [hf.2.2.2.2, subtype.coe_mk, mem_support, ne.def, one_ne_zero, not_false_iff],
      exact mem_Union_of_mem _ this },
    simp_rw ‚Üê this,
    apply is_open_Union_countable,
    rintros ‚ü®f, hf‚ü©,
    exact hf.2.2.1.continuous.is_open_support },
  obtain ‚ü®g0, hg‚ü© : ‚àÉ (g0 : ‚Ñï ‚Üí Œπ), T = range g0,
  sorry { apply countable.exists_eq_range T_count,
    rcases eq_empty_or_nonempty T with rfl|hT,
    { simp only [Union_false, Union_empty] at hT,
      simp only [‚ÜêhT, not_nonempty_empty] at h's,
      exact h's.elim },
    { exact hT } },
  let g : ‚Ñï ‚Üí E ‚Üí ‚Ñù := Œª n, (g0 n).1,
  have g_smooth : ‚àÄ n, cont_diff ‚Ñù ‚ä§ (g n) := Œª n, (g0 n).2.2.2.1,
  have g_comp_supp : ‚àÄ n, has_compact_support (g n) := Œª n, (g0 n).2.2.1,
  obtain ‚ü®Œ¥, Œ¥pos, c, Œ¥c‚ü© :
    ‚àÉ (Œ¥ : ‚Ñï ‚Üí ‚Ñù‚â•0), (‚àÄ (i : ‚Ñï), 0 < Œ¥ i) ‚àß ‚àÉ (c : nnreal), has_sum Œ¥ c ‚àß c < 1,
    from nnreal.exists_pos_sum_of_countable one_ne_zero ‚Ñï,
  have : ‚àÄ (n : ‚Ñï), ‚àÉ (r : ‚Ñù),
    0 < r ‚àß ‚àÄ i ‚â§ n, ‚àÄ x, ‚à•iterated_fderiv ‚Ñù i (r ‚Ä¢ g n) x‚à• ‚â§ Œ¥ n,
  { assume n,
    have : ‚àÄ i, ‚àÉ R, ‚àÄ x, ‚à•iterated_fderiv ‚Ñù i (Œª x, g n x) x‚à• ‚â§ R,
    { assume i,
      have : bdd_above (range (Œª x, ‚à•iterated_fderiv ‚Ñù i (Œª (x : E), g n x) x‚à•)),
      { apply ((g_smooth n).continuous_iterated_fderiv le_top).norm
          .bdd_above_range_of_has_compact_support,
        apply has_compact_support.comp_left _ norm_zero,
        apply (g_comp_supp n).iterated_fderiv },
      rcases this with ‚ü®R, hR‚ü©,
      exact ‚ü®R, Œª x, hR (mem_range_self _)‚ü© },
    choose R hR using this,
    let M := max (((finset.range (n+1)).image R).max' (by simp)) 1,
    have M_pos : 0 < M := zero_lt_one.trans_le (le_max_right _ _),
    have Œ¥npos : 0 < Œ¥ n := Œ¥pos n,
    have : ‚àÄ i ‚â§ n, R i ‚â§ M,
    { assume i hi,
      refine le_trans _ (le_max_left _ _),
      apply finset.le_max',
      apply finset.mem_image_of_mem,
      simp only [finset.mem_range],
      linarith },
    refine ‚ü®M‚Åª¬π * Œ¥ n, by positivity, Œª i hi x, _‚ü©,
    rw iterated_fderiv_const_smul_apply,
    swap, { exact (g_smooth n).of_le le_top },
    calc ‚à•(M‚Åª¬π * ‚Üë(Œ¥ n)) ‚Ä¢ iterated_fderiv ‚Ñù i (g n) x‚à•
        = M‚Åª¬π * Œ¥ n * ‚à•iterated_fderiv ‚Ñù i (g n) x‚à• : sorry
    ... ‚â§ M‚Åª¬π * Œ¥ n * M : sorry
    ... = Œ¥ n : by field_simp [M_pos.ne'] }
end
