/-
Copyright (c) 2022 Vincent Beffara. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Vincent Beffara
-/
import analysis.complex.cauchy_integral
import analysis.complex.removable_singularity
import analysis.calculus.uniform_limits_deriv

/-!
# Locally uniform limits of holomorphic functions

## Main results

* `tendsto_locally_uniformly_on.differentiable_on`: A locally uniform limit of holomorphic functions
  is holomorphic.
* `tendsto_locally_uniformly_on.deriv`: Locally uniform convergence implies locally uniform
  convergence of the derivatives to the derivative of the limit.
-/

open set metric measure_theory filter complex interval_integral
open_locale real topological_space

section cauchy_deriv

variables {E : Type*} [normed_add_comm_group E] [complete_space E] [normed_space ‚ÑÇ E]
  {w‚ÇÄ w c z : ‚ÑÇ} {R M : ‚Ñù} {f : ‚ÑÇ ‚Üí E} {U : set ‚ÑÇ}

lemma diff_cont_on_cl.two_pi_I_inv_smul_circle_integral_sub_inv_smul
  (hf : diff_cont_on_cl ‚ÑÇ f (metric.ball c R)) (hw : w ‚àà metric.ball c R) :
  (2 * œÄ * I : ‚ÑÇ)‚Åª¬π ‚Ä¢ ‚àÆ z in C(c, R), (z - w)‚Åª¬π ‚Ä¢ f z = f w :=
begin
  have hR : 0 < R := not_le.mp (ball_eq_empty.not.mp (nonempty_of_mem hw).ne_empty),
  refine two_pi_I_inv_smul_circle_integral_sub_inv_smul_of_differentiable_on_off_countable
    countable_empty hw _ _,
  { simpa only [closure_ball c hR.ne.symm] using hf.continuous_on },
  { simpa only [diff_empty] using Œª z hz, hf.differentiable_at is_open_ball hz }
end

lemma two_pi_I_inv_smul_circle_integral_sub_inv_smul_of_differentiable (hU : is_open U)
  (hc : closed_ball c R ‚äÜ U) (hf : differentiable_on ‚ÑÇ f U) (hw‚ÇÄ : w‚ÇÄ ‚àà ball c R) :
  (2 * œÄ * I : ‚ÑÇ)‚Åª¬π ‚Ä¢ ‚àÆ z in C(c, R), ((z - w‚ÇÄ) ^ 2)‚Åª¬π ‚Ä¢ f z = deriv f w‚ÇÄ :=
begin
  have hR : 0 < R := not_le.mp (ball_eq_empty.not.mp (nonempty_of_mem hw‚ÇÄ).ne_empty),
  have hf' : differentiable_on ‚ÑÇ (dslope f w‚ÇÄ) U,
    from (differentiable_on_dslope (hU.mem_nhds ((ball_subset_closed_ball.trans hc) hw‚ÇÄ))).mpr hf,
  have h0 := (hf'.diff_cont_on_cl_ball hR hc).two_pi_I_inv_smul_circle_integral_sub_inv_smul hw‚ÇÄ,
  rw [‚Üê dslope_same, ‚Üê h0],
  congr' 1,
  transitivity ‚àÆ z in C(c, R), ((z - w‚ÇÄ) ^ 2)‚Åª¬π ‚Ä¢ (f z - f w‚ÇÄ),
  { have h1 : continuous_on (Œª (z : ‚ÑÇ), ((z - w‚ÇÄ) ^ 2)‚Åª¬π) (sphere c R),
    { refine ((continuous_id'.sub continuous_const).pow 2).continuous_on.inv‚ÇÄ (Œª w hw h, _),
      exact sphere_disjoint_ball.ne_of_mem hw hw‚ÇÄ (sub_eq_zero.mp (sq_eq_zero_iff.mp h)) },
    have h2 : circle_integrable (Œª (z : ‚ÑÇ), ((z - w‚ÇÄ) ^ 2)‚Åª¬π ‚Ä¢ f z) c R,
    { refine continuous_on.circle_integrable (pos_of_mem_ball hw‚ÇÄ).le _,
      exact h1.smul (hf.continuous_on.mono (sphere_subset_closed_ball.trans hc)) },
    have h3 : circle_integrable (Œª (z : ‚ÑÇ), ((z - w‚ÇÄ) ^ 2)‚Åª¬π ‚Ä¢ f w‚ÇÄ) c R,
      from continuous_on.circle_integrable (pos_of_mem_ball hw‚ÇÄ).le (h1.smul continuous_on_const),
    have h4 : ‚àÆ (z : ‚ÑÇ) in C(c, R), ((z - w‚ÇÄ) ^ 2)‚Åª¬π = 0,
      by simpa using circle_integral.integral_sub_zpow_of_ne (dec_trivial : (-2 : ‚Ñ§) ‚â† -1) c w‚ÇÄ R,
    simp only [smul_sub, circle_integral.integral_sub h2 h3, h4,
      circle_integral.integral_smul_const, zero_smul, sub_zero] },
  { refine circle_integral.integral_congr (pos_of_mem_ball hw‚ÇÄ).le (Œª z hz, _),
    simp only [dslope_of_ne, metric.sphere_disjoint_ball.ne_of_mem hz hw‚ÇÄ, slope, ‚Üê smul_assoc, sq,
      mul_inv, ne.def, not_false_iff, vsub_eq_sub, algebra.id.smul_eq_mul] }
end

end cauchy_deriv

section unif_compact

variables {Œ± Œ≤ Œ≥ Œπ : Type*} [topological_space Œ±] [uniform_space Œ≤] [pseudo_metric_space Œ≥]
  {œÜ : filter Œπ} {G H : Œπ ‚Üí Œ± ‚Üí Œ≤} {g h : Œ± ‚Üí Œ≤} {F : Œπ ‚Üí Œ± ‚Üí Œ≥} {f : Œ± ‚Üí Œ≥}
  {s t : set Œ±} {a : Œ±}

lemma tendsto_locally_uniformly_on_tfae [locally_compact_space Œ±]
  (G : Œπ ‚Üí Œ± ‚Üí Œ≤) (g : Œ± ‚Üí Œ≤) (œÜ : filter Œπ) (ht : is_open t) :
  [ (tendsto_locally_uniformly_on G g œÜ t),
    (‚àÄ K ‚äÜ t, is_compact K ‚Üí tendsto_uniformly_on G g œÜ K),
    (‚àÄ x ‚àà t, ‚àÉ v ‚àà ùìù[t] x, tendsto_uniformly_on G g œÜ v) ].tfae :=
begin
  tfae_have : 1 ‚Üí 2,
  { rintro h K hK1 hK2,
    exact (tendsto_locally_uniformly_on_iff_tendsto_uniformly_on_of_compact hK2).mp (h.mono hK1) },
  tfae_have : 2 ‚Üí 3,
  { rintro h x hx,
    obtain ‚ü®K, ‚ü®hK1, hK2‚ü©, hK3‚ü© := (compact_basis_nhds x).mem_iff.mp (ht.mem_nhds hx),
    refine ‚ü®K, nhds_within_le_nhds hK1, h K hK3 hK2‚ü© },
  tfae_have : 3 ‚Üí 1,
  { rintro h u hu x hx,
    obtain ‚ü®v, hv1, hv2‚ü© := h x hx,
    exact ‚ü®v, hv1, hv2 u hu‚ü© },
  tfae_finish
end

lemma tendsto_locally_uniformly_on_iff_forall_compact [locally_compact_space Œ±] (ht : is_open t) :
  tendsto_locally_uniformly_on G g œÜ t ‚Üî
  ‚àÄ K ‚äÜ t, is_compact K ‚Üí tendsto_uniformly_on G g œÜ K :=
(tendsto_locally_uniformly_on_tfae G g œÜ ht).out 0 1

lemma tendsto_locally_uniformly_on_iff_filter :
  tendsto_locally_uniformly_on G g œÜ t ‚Üî
  ‚àÄ x ‚àà t, tendsto_uniformly_on_filter G g œÜ (ùìù[t] x) :=
begin
  simp only [tendsto_uniformly_on_filter, eventually_prod_iff],
  split,
  { rintro h x hx u hu,
    obtain ‚ü®s, hs1, hs2‚ü© := h u hu x hx,
    exact ‚ü®_, hs2, _, eventually_of_mem hs1 (Œª x, id), Œª i hi y hy, hi y hy‚ü© },
  { rintro h u hu x hx,
    obtain ‚ü®pa, hpa, pb, hpb, h‚ü© := h x hx u hu,
    refine ‚ü®pb, hpb, eventually_of_mem hpa (Œª i hi y hy, h hi hy)‚ü© }
end

lemma tendsto_locally_uniformly_iff_filter :
  tendsto_locally_uniformly G g œÜ ‚Üî
  ‚àÄ x, tendsto_uniformly_on_filter G g œÜ (ùìù x) :=
by simpa [‚Üê tendsto_locally_uniformly_on_univ, ‚Üê nhds_within_univ] using
  @tendsto_locally_uniformly_on_iff_filter _ _ _ _ _ _ _ _ univ

lemma tendsto_locally_uniformly_on.tendsto_at (hg : tendsto_locally_uniformly_on G g œÜ t)
  ‚¶Éa : Œ±‚¶Ñ (ha : a ‚àà t) :
  tendsto (Œª i, G i a) œÜ (ùìù (g a)) :=
begin
  refine ((tendsto_locally_uniformly_on_iff_filter.mp hg) a ha).tendsto_at _,
  simpa only [filter.principal_singleton] using pure_le_nhds_within ha
end

lemma tendsto_locally_uniformly_on.unique [œÜ.ne_bot] [t2_space Œ≤]
  (hg : tendsto_locally_uniformly_on G g œÜ t) (hh : tendsto_locally_uniformly_on G h œÜ t) :
  t.eq_on g h :=
Œª a ha, tendsto_nhds_unique (hg.tendsto_at ha) (hh.tendsto_at ha)

lemma tendsto_locally_uniformly_on.congr (hg : tendsto_locally_uniformly_on G g œÜ t)
  (hh : ‚àÄ n, t.eq_on (G n) (H n)) :
  tendsto_locally_uniformly_on H g œÜ t :=
begin
  rintro u hu x hx,
  obtain ‚ü®t', ht', h‚ü© := hg u hu x hx,
  refine ‚ü®t ‚à© t', inter_mem self_mem_nhds_within ht', _‚ü©,
  filter_upwards [h] with i hi y hy using hh i hy.1 ‚ñ∏ hi y hy.2
end

lemma tendsto_locally_uniformly_on.congr' (hg : tendsto_locally_uniformly_on G g œÜ t)
  (hh : t.eq_on g h) :
  tendsto_locally_uniformly_on G h œÜ t :=
begin
  rintro u hu x hx,
  obtain ‚ü®t', ht', h‚ü© := hg u hu x hx,
  refine ‚ü®t ‚à© t', inter_mem self_mem_nhds_within ht', _‚ü©,
  filter_upwards [h] with i hi y hy using hh hy.1 ‚ñ∏ hi y hy.2
end

end unif_compact

section cderiv

variables {E : Type*} [normed_add_comm_group E] [normed_space ‚ÑÇ E] [complete_space E]
  {Œπ : Type*} {œÜ : filter Œπ} {U K : set ‚ÑÇ} {z : ‚ÑÇ} {f g : ‚ÑÇ ‚Üí E} {F : Œπ ‚Üí ‚ÑÇ ‚Üí E} {M r Œ¥ : ‚Ñù}

noncomputable def cderiv (r : ‚Ñù) (f : ‚ÑÇ ‚Üí E) (z : ‚ÑÇ) : E :=
  (2 * œÄ * I : ‚ÑÇ)‚Åª¬π ‚Ä¢ ‚àÆ w in C(z, r), ((w - z) ^ 2)‚Åª¬π ‚Ä¢ f w

lemma norm_cderiv_le (hr : 0 < r) (hf : ‚àÄ w ‚àà sphere z r, ‚à•f w‚à• ‚â§ M) :
  ‚à•cderiv r f z‚à• ‚â§ M / r :=
begin
  have hM : 0 ‚â§ M,
  { obtain ‚ü®w, hw‚ü© : ‚àÉ w : ‚ÑÇ, w ‚àà sphere z r := normed_space.sphere_nonempty.mpr hr.le,
    exact (norm_nonneg _).trans (hf w hw) },
  have h1 : ‚àÄ w ‚àà sphere z r, ‚à•((w - z) ^ 2)‚Åª¬π ‚Ä¢ f w‚à• ‚â§ M / r ^ 2,
  { intros w hw,
    simp only [mem_sphere_iff_norm, norm_eq_abs] at hw,
    simp only [norm_smul, inv_mul_eq_div, hw, norm_eq_abs, map_inv‚ÇÄ, complex.abs_pow],
    exact div_le_div hM (hf w hw) (sq_pos_of_pos hr) le_rfl },
  have h2 := circle_integral.norm_integral_le_of_norm_le_const hr.le h1,
  simp only [cderiv, norm_smul],
  refine (mul_le_mul le_rfl h2 (norm_nonneg _) (norm_nonneg _)).trans (le_of_eq _),
  field_simp [_root_.abs_of_nonneg real.pi_pos.le, real.pi_pos.ne.symm, hr.ne.symm],
  ring
end

lemma cderiv_eq_deriv (hU : is_open U) (hf : differentiable_on ‚ÑÇ f U) (hr : 0 < r)
  (hzr : closed_ball z r ‚äÜ U) :
  cderiv r f z = deriv f z :=
two_pi_I_inv_smul_circle_integral_sub_inv_smul_of_differentiable hU hzr hf (mem_ball_self hr)

lemma dist_cderiv_le (hr : 0 < r) (hzr : closed_ball z r ‚äÜ U)
  (hfg : ‚àÄ w ‚àà sphere z r, ‚à•f w - g w‚à• < M)
  (hf : continuous_on f U) (hg : continuous_on g U) :
  dist (cderiv r f z) (cderiv r g z) < M / r :=
begin
  obtain ‚ü®L, hL1, hL2‚ü© : ‚àÉ L, L < M ‚àß ‚àÄ w ‚àà sphere z r, ‚à•f w - g w‚à• ‚â§ L,
  { have e0 : sphere z r ‚äÜ U := sphere_subset_closed_ball.trans hzr,
    have e1 : is_compact (sphere z r) := is_compact_sphere z r,
    have e2 : (sphere z r).nonempty := normed_space.sphere_nonempty.mpr hr.le,
    have e3 : continuous_on (Œª w, ‚à•f w - g w‚à•) (sphere z r),
      from continuous_norm.comp_continuous_on ((hf.mono e0).sub (hg.mono e0)),
    obtain ‚ü®x, hx, hx'‚ü© := is_compact.exists_forall_ge e1 e2 e3,
    refine ‚ü®‚à•f x - g x‚à•, hfg x hx, hx'‚ü© },
  have h1 : L / r < M / r := (div_lt_div_right hr).mpr hL1,
  have h2 : continuous_on (Œª (w : ‚ÑÇ), ((w - z) ^ 2)‚Åª¬π) (sphere z r),
  { refine ((continuous_id'.sub continuous_const).pow 2).continuous_on.inv‚ÇÄ (Œª w hw h, hr.ne _),
    simpa [sq_eq_zero_iff.mp h] using mem_sphere_iff_norm.mp hw },
  convert ‚Üê (norm_cderiv_le hr hL2).trans_lt h1 using 1,
  simp only [dist_eq_norm, cderiv, ‚Üê smul_sub],
  congr' 2,
  simp only [smul_sub],
  refine circle_integral.integral_sub _ _,
  { have e1 := (h2.smul (continuous_on.mono hf ((sphere_subset_closed_ball).trans hzr))),
    exact continuous_on.circle_integrable hr.le e1 },
  { have e1 := (h2.smul (continuous_on.mono hg ((sphere_subset_closed_ball).trans hzr))),
    exact continuous_on.circle_integrable hr.le e1 }
end

lemma tendsto_uniformly_on_cderiv (hU : is_open U) (hf : continuous_on f U) (hK2 : is_compact K)
  (hŒ¥ : 0 < Œ¥) (hFn : ‚àÄ n, continuous_on (F n) U) (hK3 : cthickening Œ¥ K ‚äÜ U)
  (hF : tendsto_uniformly_on F f œÜ (cthickening Œ¥ K)) :
  tendsto_uniformly_on (Œª n, cderiv Œ¥ (F n)) (cderiv Œ¥ f) œÜ K :=
begin
  have hK1 : K ‚äÜ U := (self_subset_cthickening _).trans hK3,
  rw [tendsto_uniformly_on_iff] at hF ‚ä¢,
  rintro Œµ hŒµ,
  filter_upwards [hF (Œµ * Œ¥) (mul_pos hŒµ hŒ¥)] with n h z hz,
  simp_rw [dist_eq_norm] at h,
  have h2 : ‚àÄ w ‚àà sphere z Œ¥, ‚à•f w - F n w‚à• < Œµ * Œ¥,
    from Œª w hw1, h w (closed_ball_subset_cthickening hz Œ¥ (sphere_subset_closed_ball hw1)),
  convert dist_cderiv_le hŒ¥ ((closed_ball_subset_cthickening hz Œ¥).trans hK3) h2 hf (hFn n),
  field_simp [hŒ¥.ne.symm]; ring
end

end cderiv

section deriv_limit

variables {ùïú Œ≤ Œπ : Type*} [is_R_or_C ùïú] [normed_add_comm_group Œ≤] [normed_space ùïú Œ≤]
  {U : set ùïú} {x : ùïú} {F : Œπ ‚Üí ùïú ‚Üí Œ≤} {f g : ùïú ‚Üí Œ≤} {œÜ : filter Œπ} [ne_bot œÜ]

lemma has_deriv_at_of_tendsto_localy_uniformly_on (hU : is_open U) (hx : x ‚àà U)
  (hF : ‚àÄ n, differentiable_on ùïú (F n) U) (hf : ‚àÄ x ‚àà U, tendsto (Œª n, F n x) œÜ (ùìù (f x)))
  (hg : tendsto_locally_uniformly_on (deriv ‚àò F) g œÜ U) :
  has_deriv_at f (g x) x :=
begin
  have h1 : U ‚àà ùìù x := hU.mem_nhds hx,
  have h2 : tendsto_uniformly_on_filter (deriv ‚àò F) g œÜ (ùìù[U] x),
    from tendsto_locally_uniformly_on_iff_filter.mp hg x hx,
  rw [is_open.nhds_within_eq hU hx] at h2,
  have h3 : (univ √óÀ¢ U) ‚àà œÜ.prod (ùìù x) := by simp only [h1, prod_mem_prod_iff, univ_mem, and_self],
  have h4 : ‚àÄ·∂† (n : Œπ √ó ùïú) in œÜ.prod (ùìù x), has_deriv_at (F n.1) (deriv (F n.1) n.2) n.2,
    from eventually_of_mem h3 (Œª ‚ü®n, z‚ü© ‚ü®hn, hz‚ü©, (hF n).has_deriv_at (hU.mem_nhds hz)),
  exact has_deriv_at_of_tendsto_uniformly_on_filter h2 h4 (eventually_of_mem h1 hf),
end

end deriv_limit

section weierstrass

variables {Œπ E : Type*} [normed_add_comm_group E] [normed_space ‚ÑÇ E] [complete_space E]
  {œÜ : filter Œπ} [ne_bot œÜ] {U K : set ‚ÑÇ} (hU : is_open U) {F : Œπ ‚Üí ‚ÑÇ ‚Üí E} {f g : ‚ÑÇ ‚Üí E}
  (hF : ‚àÄ n, differentiable_on ‚ÑÇ (F n) U) (hf : tendsto_locally_uniformly_on F f œÜ U)
include hU hF hf

lemma tendsto_uniformly_on_deriv_of_cthickening_subset {Œ¥ : ‚Ñù} (hŒ¥: 0 < Œ¥) (hK : is_compact K)
  (hKU: cthickening Œ¥ K ‚äÜ U) :
  tendsto_uniformly_on (deriv ‚àò F) (cderiv Œ¥ f) œÜ K :=
begin
  have h1 : ‚àÄ n, continuous_on (F n) U := Œª n, (hF n).continuous_on,
  have h2 : continuous_on f U := hf.continuous_on (eventually_of_forall h1),
  have h3 : is_compact (cthickening Œ¥ K),
    from is_compact_of_is_closed_bounded is_closed_cthickening hK.bounded.cthickening,
  have h4 : tendsto_uniformly_on F f œÜ (cthickening Œ¥ K),
    from (tendsto_locally_uniformly_on_iff_forall_compact hU).mp hf (cthickening Œ¥ K) hKU h3,
  have h5 : tendsto_uniformly_on (cderiv Œ¥ ‚àò F) (cderiv Œ¥ f) œÜ K,
    from tendsto_uniformly_on_cderiv hU h2 hK hŒ¥ h1 hKU h4,
  refine h5.congr (eventually_of_forall (Œª n z hz, _)),
  exact cderiv_eq_deriv hU (hF n) hŒ¥ ((closed_ball_subset_cthickening hz Œ¥).trans hKU)
end

lemma exists_cthickening_tendsto_uniformly_on (hK : is_compact K) (hKU : K ‚äÜ U) :
  ‚àÉ Œ¥ > 0, cthickening Œ¥ K ‚äÜ U ‚àß tendsto_uniformly_on (deriv ‚àò F) (cderiv Œ¥ f) œÜ K :=
begin
  obtain ‚ü®Œ¥, hŒ¥, hKŒ¥‚ü© := hK.exists_cthickening_subset_open hU hKU,
  exact ‚ü®Œ¥, hŒ¥, hKŒ¥, tendsto_uniformly_on_deriv_of_cthickening_subset hU hF hf hŒ¥ hK hKŒ¥‚ü©
end

lemma tendsto_locally_uniformly_on.differentiable_on : differentiable_on ‚ÑÇ f U :=
begin
  rintro x hx,
  obtain ‚ü®K, ‚ü®hKx, hK‚ü©, hKU‚ü© := (compact_basis_nhds x).mem_iff.mp (hU.mem_nhds hx),
  obtain ‚ü®Œ¥, hŒ¥, -, h1‚ü© := exists_cthickening_tendsto_uniformly_on hU hF hf hK hKU,
  have h2 : interior K ‚äÜ U := interior_subset.trans hKU,
  have h3 : ‚àÄ n, differentiable_on ‚ÑÇ (F n) (interior K) := Œª n, (hF n).mono h2,
  have h4 : tendsto_locally_uniformly_on F f œÜ (interior K) := hf.mono h2,
  have h5 : tendsto_locally_uniformly_on (deriv ‚àò F) (cderiv Œ¥ f) œÜ (interior K),
    from h1.tendsto_locally_uniformly_on.mono interior_subset,
  have h6 : ‚àÄ x ‚àà interior K, has_deriv_at f (cderiv Œ¥ f x) x,
    from Œª x h, has_deriv_at_of_tendsto_localy_uniformly_on is_open_interior h h3 h4.tendsto_at h5,
  have h7 : differentiable_on ‚ÑÇ f (interior K),
    from Œª x hx, (h6 x hx).differentiable_at.differentiable_within_at,
  exact (h7.differentiable_at (interior_mem_nhds.mpr hKx)).differentiable_within_at
end

lemma tendsto_locally_uniformly_on.deriv :
  tendsto_locally_uniformly_on (deriv ‚àò F) (deriv f) œÜ U :=
begin
  refine (tendsto_locally_uniformly_on_iff_forall_compact hU).mpr (Œª K hKU hK, _),
  obtain ‚ü®Œ¥, hŒ¥, hK4, h‚ü© := exists_cthickening_tendsto_uniformly_on hU hF hf hK hKU,
  refine h.congr' (Œª z hz, _),
  refine cderiv_eq_deriv hU _ hŒ¥ ((closed_ball_subset_cthickening hz Œ¥).trans hK4),
  exact hf.differentiable_on hU hF
end

end weierstrass
