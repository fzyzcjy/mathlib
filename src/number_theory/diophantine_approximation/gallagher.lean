/-
Copyright (c) 2022 Oliver Nash. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Oliver Nash
-/
import analysis.normed.group.add_circle
import measure_theory.covering.density_theorem
import measure_theory.measure.haar
import order.liminf_limsup

/-!
# Gallagher's Theorem on Diophantine Approximation

Explain result and sketch proof in [Approximation by reduced fractions](Gallagher1961).

-/

noncomputable theory

open set filter function metric measure_theory measure_theory.measure_space
open_locale nnreal ennreal topological_space

/- On reflection it might be better not to have unions of balls in this lemma (i.e., for `z` to be
just a sequence of points in `Œ±`) and push the complexity of the unions elsewhere (e.g., into
`volume_well_approximable_eq_zero_or_one`).

TODO Decide and tidy up this mess once sorry-free. (The remaining `sorry`s are all easy.) -/
lemma measure_inf_often_eq
  {Œ± : Type*} [metric_space Œ±] [proper_space Œ±] [measurable_space Œ±] [borel_space Œ±]
  (Œº : measure Œ±) [is_locally_finite_measure Œº] [is_doubling_measure Œº]
  {œÅ : ‚Ñù‚â•0} (hœÅ : 1 < œÅ)
  {r : ‚Ñï ‚Üí ‚Ñù} (hr‚ÇÄ : ‚àÄ j, 0 < r j) (hr‚ÇÅ : tendsto r at_top (ùìù 0))
  (z : ‚Ñï ‚Üí finset Œ±)
  (p : ‚Ñï ‚Üí Prop) :
  Œº (cofinite.blimsup p $ Œª k, ‚ãÉ (w ‚àà z k), closed_ball w (r k)) =
  Œº (cofinite.blimsup p $ Œª k, ‚ãÉ (w ‚àà z k), closed_ball w $ œÅ * r k) :=
begin
  let U := Œª k, ‚ãÉ (w ‚àà z k), closed_ball w (r k),
  let I := Œª k, ‚ãÉ (w ‚àà z k), closed_ball w $ œÅ * r k,
  have hUI' : ‚àÄ n, U n ‚â§ I n,
  { intros n x hx,
    simp only [mem_Union, exists_prop] at hx ‚ä¢,
    obtain ‚ü®w, hw‚ÇÅ, hw‚ÇÇ‚ü© := hx,
    refine ‚ü®w, hw‚ÇÅ, closed_ball_subset_closed_ball _ hw‚ÇÇ‚ü©,
    exact le_mul_of_one_le_left (hr‚ÇÄ n).le hœÅ.le, },
  let ùìò : set Œ± := cofinite.blimsup p I,
  let ùì§ : ‚Ñï ‚Üí set Œ± := Œª k, ‚ãÉ (l : ‚Ñï) (hl‚ÇÅ : k ‚â§ l) (hl‚ÇÇ : p l), U l,
  let ùìì : ‚Ñï ‚Üí set Œ± := Œª k, ùìò \ ùì§ k,
  have hùìì‚ÇÄ : ‚àÄ k, ùìì k ‚â§ ùìò := Œª k, sdiff_le,
  have hUI : cofinite.blimsup p U ‚â§ ùìò := mono_blimsup hUI',
  have hùìì : ùìò \ cofinite.blimsup p U = ‚ãÉ k, ùìì k,
  {
    -- have : (‚ãÉ k, (ùìò \ ùì§ k)) ‚â§ ùìò := Union_subset (Œª k, @sdiff_le _ ùìò (ùì§ k) _),
    -- apply eq_of_sdiff_eq_sdiff sdiff_le this,
    -- rw [sdiff_sdiff_eq_self hUI, sdiff_eq, compl_Union],
    -- simp_rw [sdiff_eq, compl_inf, compl_compl],
    -- change inf_often p U = ùìò ‚à© ‚ãÇ k, ùìò·∂ú ‚à™ ùì§ k,
    -- rw [‚Üê union_Inter, inter_union_distrib_left, inter_compl_self, empty_union],
    -- etc.
    sorry, },
  have hùìì_mono : monotone ùìì :=
    Œª k‚ÇÅ k‚ÇÇ h, sdiff_le_sdiff_left $ bUnion_mono (Œª n, h.trans) (Œª n hn x hx, hx),
  have hùìì‚ÇÇ : ‚àÄ k l w, k ‚â§ l ‚Üí p l ‚Üí w ‚àà z l ‚Üí disjoint (ùìì k) (closed_ball w (r l)),
  { sorry, },
  have hùìì‚ÇÉ : ‚àÄ k l w, k ‚â§ l ‚Üí p l ‚Üí w ‚àà z l ‚Üí
    Œº (ùìì k ‚à© closed_ball w (œÅ * r l)) + Œº (closed_ball w (r l)) ‚â§ Œº (closed_ball w $ œÅ * r l),
  { -- `measure_union` (or `measure_union'`).
    sorry, },
  -- Actually this is closer to what need:
  have hùìì‚ÇÉ' : ‚àÄ k l w, k ‚â§ l ‚Üí p l ‚Üí w ‚àà z l ‚Üí
    Œº (ùìì k ‚à© closed_ball w (œÅ * r l)) / Œº (closed_ball w $ œÅ * r l) +
    Œº (closed_ball w (r l)) / Œº (closed_ball w $ œÅ * r l) ‚â§ 1,
  { sorry, },
  suffices : ‚àÄ k, Œº (ùìì k) = 0,
  { change Œº (cofinite.blimsup p U) = Œº ùìò,
    apply measure_eq_measure_of_null_diff hUI,
    simpa only [hùìì, measure_Union_eq_supr hùìì_mono.directed_le, ennreal.supr_eq_zero], },
  intros,
  by_contra contra,
  obtain ‚ü®x, hx‚ÇÅ, hx‚ÇÇ‚ü© := measure.exists_mem_of_measure_ne_zero_of_ae contra
    (is_doubling_measure.ae_tendsto_measure_inter_div Œº (ùìì k) 1 (by norm_num)),
  have hx‚ÇÄ : x ‚àà ùìò := hùìì‚ÇÄ _ hx‚ÇÅ,
  -- let f‚ÇÅ : ‚Ñï ‚Ü™ {n | p n ‚àß x ‚àà I n} := hx‚ÇÄ.nat_embedding _,
  -- choose f‚ÇÇ hf‚ÇÇ using Œª (n : {n | p n ‚àß x ‚àà I n}), mem_Union.mp n.property.2,
  -- have hx‚ÇÉ : tendsto
  --   (Œª j, Œº (ùìì k ‚à© closed_ball ((f‚ÇÇ ‚àò f‚ÇÅ) j) (((œÅ ‚Ä¢ r) ‚àò coe ‚àò f‚ÇÅ) j)) /
  --         Œº (closed_ball ((f‚ÇÇ ‚àò f‚ÇÅ) j) (((œÅ ‚Ä¢ r) ‚àò coe ‚àò f‚ÇÅ) j))) at_top (ùìù 1),
  -- { refine hx‚ÇÇ _ _ (Œª j, _) _ (Œª j, _),
  --   { exact mul_pos (zero_lt_one.trans hœÅ) (hr‚ÇÄ (f‚ÇÅ j)), },
  --   { sorry, },
  --   { simp only [subtype.val_eq_coe, mem_Union, exists_prop] at hf‚ÇÇ,
  --     exact ((hf‚ÇÇ (f‚ÇÅ j)).2), }, },
  -- have hœÅ' : tendsto
  --   (Œª j, Œº (closed_ball ((f‚ÇÇ ‚àò f‚ÇÅ) j) (((œÅ ‚Ä¢ r) ‚àò coe ‚àò f‚ÇÅ) j)) /
  --         Œº (closed_ball ((f‚ÇÇ ‚àò f‚ÇÅ) j) ((r ‚àò coe ‚àò f‚ÇÅ) j))) at_top (ùìù $ œÅ^-d),
  -- { sorry, },
  -- have : 1 + (œÅ : ‚Ñù‚â•0‚àû) ^ -d ‚â§ 1,
  -- { refine le_of_tendsto (hx‚ÇÉ.add hœÅ') _,
  --   -- Use hùìì‚ÇÉ'
  --   sorry, },
  -- replace this : (œÅ : ‚Ñù‚â•0‚àû) ^ -d ‚â§ 0 :=
  --   ennreal.add_le_cancellable_iff_ne.mpr ennreal.one_ne_top (by simpa only [add_zero] using this),
  -- simp only [nonpos_iff_eq_zero, ennreal.rpow_eq_zero_iff, ennreal.coe_eq_zero, right.neg_pos_iff,
  --   ennreal.coe_ne_top, false_and, or_false] at this,
  -- rw this.1 at hœÅ,
  -- exact not_lt_of_gt hœÅ one_pos,
  sorry,
end

namespace unit_add_circle

instance : measurable_space unit_add_circle := borel unit_add_circle

instance : borel_space unit_add_circle := ‚ü®rfl‚ü©

instance : measure_space unit_add_circle := ‚ü®measure.add_haar_measure ‚ä§‚ü©

instance : is_finite_measure (volume : measure unit_add_circle) :=
compact_space.is_finite_measure

@[simp] lemma volume_closed_ball (x : unit_add_circle) (r : ‚Ñù) :
  volume (closed_ball x r) = min 1 (2 * r.to_nnreal) :=
sorry

instance : is_doubling_measure (volume : measure unit_add_circle) :=
sorry

/-- Given a sequence of real numbers: `n ‚Ü¶ œà n`, `add_circle.well_approximable œà` is the set of
points `x` in `‚Ñù / ‚Ñ§` for which there exist infinitely-many rationals `m/n` (in lowest terms) with
`‚à•x - ‚Üë((m : ‚Ñù) / n)‚à• ‚â§ œà n`.

Gallagher's theorem `add_circle.volume_well_approximable_eq_zero_or_one` states that
`add_circle.well_approximable œà` always has measure zero or one. The
Duffin-Koukoulopoulos-Maynard-Schaefer theorem gives a condition for telling which of these two
cases actually occurs for a given `œà`. -/
def well_approximable (œà : ‚Ñï ‚Üí ‚Ñù) : set unit_add_circle :=
cofinite.limsup $ Œª n x, ‚àÉ (m : ‚Ñï), m < n ‚àß gcd n m = 1 ‚àß ‚à•x - ‚Üë((m : ‚Ñù) / n)‚à• ‚â§ œà n

-- Needs (easy) asymptotic growth bounds for arithmetic functions.
lemma volume_well_approximable_eq_zero_or_one_aux
  {œà : ‚Ñï ‚Üí ‚Ñù} (hœà : ‚àÄ j, 0 < œà j) (hœà' : ¬¨ tendsto œà at_top (ùìù 0)) :
  volume (well_approximable œà) = 0 ‚à® volume (well_approximable œà) = 1 :=
sorry

local notation a `‚à§` b := ¬¨ a ‚à£ b
local notation a `‚Äñ` b := (a ‚à£ b) ‚àß ¬¨ a^2 ‚à£ b

/-- Gallagher's theorem.

TODO Eliminate the `hœà` hypothesis? -/
lemma volume_well_approximable_eq_zero_or_one {œà : ‚Ñï ‚Üí ‚Ñù} (hœà : ‚àÄ j, 0 < œà j) :
  volume (well_approximable œà) = 0 ‚à® volume (well_approximable œà) = 1 :=
begin
  classical,
  by_cases hœà' : tendsto œà at_top (ùìù 0),
  swap, { exact volume_well_approximable_eq_zero_or_one_aux hœà hœà', },
  let a : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï ‚Üí set unit_add_circle :=
    Œª ŒΩ p n x, ‚àÉ (m : ‚Ñï), m < n ‚àß gcd n m = 1 ‚àß ‚à•x - ‚Üë((m : ‚Ñù) / n)‚à• ‚â§ p^ŒΩ * œà n,
  let ùìê : ‚Ñï ‚Üí ‚Ñï ‚Üí set unit_add_circle := Œª ŒΩ p, cofinite.blimsup (Œª n, p ‚à§ n) (a ŒΩ p),
  let z : ‚Ñï ‚Üí finset unit_add_circle :=
    Œª n, ((finset.range n).filter n.coprime).image $ Œª m, (‚Üë((m : ‚Ñù) / n) : unit_add_circle),
  have hùìêz : ‚àÄ ŒΩ p, cofinite.blimsup (Œª n, p ‚à§ n) (Œª n, ‚ãÉ (w ‚àà z n), closed_ball w (p^ŒΩ * œà n)) = ùìê ŒΩ p,
  { intros,
    simp only [ùìê, finset.mem_image, finset.mem_filter, finset.mem_range, exists_prop, Union_exists,
      bUnion_and', Union_Union_eq_right],
    congr,
    ext n x,
    simpa only [mem_Union, exists_prop, and_assoc], },
  have hùìê : ‚àÄ ŒΩ p, 1 < p ‚Üí volume (ùìê 0 p) = volume (ùìê ŒΩ p),
  { intros ŒΩ p hp,
    rcases eq_or_ne ŒΩ 0 with rfl | hŒΩ, { refl, },
    have hœÅ : 1 < (p : ‚Ñù‚â•0)^ŒΩ := one_lt_pow (nat.one_lt_cast.mpr hp) hŒΩ,
    simp_rw ‚Üê hùìêz,
    have h‚ÇÅ : ‚àÄ (t : ‚Ñù‚â•0), ‚àÄ·∂† (Œµ : ‚Ñù‚â•0) in ùìù 0, 2 * (t * Œµ) = t ^ (1 : ‚Ñù) * (2 * Œµ),
    { refine Œª t, eventually_of_forall (Œª Œµ, _),
      simp only [nnreal.rpow_one, ‚Üê mul_assoc, mul_comm t], },
    convert measure_inf_often_eq volume hœÅ hœà hœà' z (Œª n, p ‚à§ n),
    simp, },
  /- Remainder of proof:
   * In view of `hùìê`, given any `p`, the union of `ùìê ŒΩ p` over all `ŒΩ` has the same measure as
     `ùìê 0 p`
   * This union is invariant under the ergodic map `x ‚Ü¶ p * x` (if `p` is prime) and thus has
     measure 0 or 1. Since it is a subset of `well_approximable œà` we may as well assume it has
     measure 0 for all `p` (otherwise we're done).
   * Similarly define `ùìë`, just like `ùìê` except using the predicate `p ‚Äñ n` instead of `p | n`.
     Same argument as for `ùìê` except the different divisibility condition means the right ergodic
     map is `x ‚Ü¶ p * x + 1/p`. Thus again assume the `ùìë` have measure 0.
   * It remains to consider `ùìí` which is defined as for `ùìê` and `ùìë` but using the predicate
     `p^2 | n`. Because we have assumed `ùìê 0 p` and `ùìë 0 p` have measure zero for all primes `p`
     the measure of `ùìí p` is the same as `well_approximable œà` but `ùìí p` is invariant under
     `x ‚Ü¶ x ¬± 1/p`. This map is *not* ergodic but because we have this property for all primes,
     another density argument shows that `well_approximable œà` must have measure 0 or 1.
  -/
  sorry,
end

end unit_add_circle
